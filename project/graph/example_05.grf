<?xml version="1.0" encoding="UTF-8"?><Graph author="rodrigo.more" created="Mon Feb 26 08:31:46 BRT 2018" guiVersion="3.4.4.P" id="1519653776835" licenseType="Commercial" modified="Tue May 24 12:12:55 BRT 2022" modifiedBy="becker-developer" name="Exemplo_Mercado_BITCOIN" revision="1.104" showComponentDetails="true">
<Global>
<Metadata id="Metadata0" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" name="recordName1" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\r\n" type="delimited">
<Field name="response" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata1" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" name="recordName2" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\r\n" recordSize="-1" type="delimited">
<Field delimiter=" " eofAsDelimiter="false" name="data" nullable="true" shift="0" size="0" type="long"/>
<Field eofAsDelimiter="false" name="price" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="amount" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="tid" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="type" nullable="true" shift="0" size="0" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata2" previewAttachmentCharset="UTF-8">
<Record fieldDelimiter="|" name="recordName3" previewAttachmentCharset="UTF-8" recordDelimiter="\r\n" recordSize="-1" type="delimited">
<Field delimiter=" " eofAsDelimiter="false" format="yyyy-MM-dd HH:mm:ss" name="data" nullable="true" shift="0" size="0" type="date"/>
<Field eofAsDelimiter="false" name="price" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="amount" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="tid" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="type" nullable="true" shift="0" size="0" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata3">
<Record fieldDelimiter="|" name="recordName4" recordDelimiter="\r\n" type="delimited">
<Field name="field1" type="string"/>
</Record>
</Metadata>
<Property fileURL="workspace.prm" id="GraphParameter0"/>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" enabled="true" folded="false" height="204" id="Note0" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" title="Lê a API do mercado de Bitcoins" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="253" x="45" y="30">
<attr name="text"><![CDATA[Lê a API não autenticada do mercado de bitcoins.]]></attr>
</Note>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" enabled="true" folded="false" height="212" id="Note1" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" title="Recebe os dados da API em JSON" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="289" x="340" y="26">
<attr name="text"><![CDATA[Recebe os dados da API do mercado de Bitcoins e mapeia a saída dos dados para o componente Reformat.
]]></attr>
</Note>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" enabled="true" folded="false" height="208" id="Note2" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" title="Formatação da data" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="268" x="684" y="30">
<attr name="text"><![CDATA[Formata o campo data que vem no tipo timestamp para yyyy-MM-dd HH:mm:ss]]></attr>
</Note>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" enabled="true" folded="false" height="212" id="Note3" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" title="Envia para lixeira" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="286" x="692" y="283">
<attr name="text"><![CDATA[Envia os dados para a lixeira, ou seja, apenas um teste local.]]></attr>
</Note>
<Dictionary/>
</Global>
<Phase number="0">
<Node charset="UTF-8" enabled="enabled" guiName="Formata a data" guiX="742" guiY="108" id="FORMATA_A_DATA" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	
	
	//str2long($in.0.data); 
	
	$out.0.data = long2date($in.0.data *1000);
	$out.0.price = $in.0.price;
	$out.0.amount = $in.0.amount;
	$out.0.tid = $in.0.tid;
	$out.0.type = $in.0.type;

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node charset="UTF-8" enabled="enabled" fileURL="port:$0.response:stream" guiName="JSONReader" guiX="414" guiY="101" id="JSONREADER" type="JSON_READER">
<attr name="mapping"><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="no"?>

<!-- =========================== Context ================================ -->
<!-- Context element sets the "current node" in the JSON tree             --> 
<!-- for subsequent Mapping (or Context) operations.                      -->
<!--                                                                      -->
<!-- Parameters:                                                          -->
<!--   xpath: position in the JSON tree                                   -->
<!--   outPort: (optional) routes mapped data to specified output port    -->
<!--                                                                      -->
<!-- Valid "xpath" for root context:                                      -->
<!--   xpath="/root/object"  if root of JSON structure is an object       -->
<!--   xpath="/root/array"   if root of JSON structure is an array        -->
  
<Context xpath="/root/array" outPort="0">
      <Mapping cloverField="data" xpath="date" />
      <Mapping cloverField="price" xpath="price"/>
      <Mapping cloverField="amount" xpath="amount"/>
      <Mapping cloverField="tid" xpath="tid"/>
      <Mapping cloverField="type" xpath="type"/>
</Context>
]]></attr>
</Node>
<Node charset="ISO-8859-1" ctlFunctionsSource="//#CTL2&#10;&#10;/**&#10; * Generates request parameters (usually page numbers, offsets, timestamps, signature hashes,etc.)&#10; * Called before each request.&#10; *&#10; * Last response is is only defined if iteration number is greater than one. Therefore, for the very first request&#10; * lastResponseStatus is 200, lastResponseHeaders and lastResponseBody are empty.&#10; *&#10; * If input port is connected, incoming data record can be accessed through $in.0.fieldName&#10; *&#10; * inputEdgeRecord - contains fields of the input edge record&#10; * iterationNumber - starts at 1&#10; * lastResponseStatus - HTTP status of the previous request&#10; * lastResponseHeaders - HTTP headers of the previous request&#10; * lastResponseBody -  body of the previous request&#10; *&#10; * returns a map of params that can be used in the request URL&#10;**/&#10;function map[string, string] generateRequestParameters(map[string, string] inputEdgeRecord, integer iterationNumber, integer lastResponseStatus, map[string, string]lastResponseHeaders, string lastResponseBody) {&#10;&#10;    // Copy all input parameters into the request parameters map.&#10;    map[string, string] requestParams = inputEdgeRecord;&#10;&#10;    /**&#10;     *  PAGING&#10;     *&#10;     *  (Tip: comment/uncomment the code suitable for your use case)&#10;     **/&#10;&#10;    /** Using pages **/&#10;    requestParams[&quot;PAGE_NO&quot;] = toString(iterationNumber);&#10;&#10;    /** Using start offset and end offset **/&#10;    // integer RECORDS_PER_PAGE = 1000;&#10;    // requestParams[&quot;START_OFFSET&quot;] = toString((iterationNumber - 1) * RECORDS_PER_PAGE); //starts at 0&#10;    // requestParams[&quot;END_OFFSET&quot;] = toString((iterationNumber * RECORDS_PER_PAGE) - 1);&#10;&#10;    /*** Using start offset and records count ***/&#10;    // integer RECORDS_PER_PAGE = 1000;&#10;    // requestParams[&quot;START_OFFSET&quot;] = toString((iterationNumber - 1) * RECORDS_PER_PAGE); //starts at 0&#10;    // requestParams[&quot;RECORDS_PER_PAGE&quot;] = toString(RECORDS_PER_PAGE);&#10;&#10;    return requestParams;&#10;}&#10;&#10;/**&#10; * Determines the outcome of the response. Used for controlling the paging workflow and detecting errors.&#10; * Called after each request response.&#10; *&#10; * Default implementations returns &quot;DONE_WITH_OUTPUT&quot; to make one REST call and finish.&#10; *&#10; * If input port is connected, incoming data record can be accessed through $in.0.fieldName&#10; *&#10; * responseStatus - response HTTP status&#10; * responseHeaders - response HTTP headers&#10; * responseBody -  response body&#10; *&#10; * returns&#10; *  CONTINUE - continue to next iteration (e.g., next page)&#10; *  DONE_NO_OUTPUT (default) - last iteration finished, no data will be sent to the output port for the last iteration (no data received from the last iteration)&#10; *  DONE_WITH_OUTPUT - last iteration finished, data will be sent to the output for the last iteration (data received from the last iteration)&#10; *  RETRY - retry the last failed request&#10; *  FATAL_ERROR - fatal error, aborts the HTTP connector run&#10;**/&#10;function string checkResponse(integer responseStatus, map[string, string] responseHeaders, string responseBody) {&#10;    return &quot;DONE_WITH_OUTPUT&quot;;&#10;&#10;    // Example response handling&#10;    // if (responseStatus &gt;= 200  &amp;&amp;  responseStatus &lt; 300) {&#10;    //     return &quot;CONTINUE&quot;;&#10;    // }&#10;    // else if (responseStatus == 404) {&#10;    //     // HTTP status &quot;404 - NOT FOUND&quot; could mean there are no more pages or records&#10;    //     return &quot;DONE_NO_OUTPUT&quot;;&#10;    // }&#10;    // else if (responseStatus &gt;= 500 || responseBody.indexOf('{&quot;error&quot;: &quot;just a temporary error&quot;}') &gt; -1) {&#10;    //     // Internal server errors could be temporary (this sends the last response to the error output port)&#10;    //     return &quot;RETRY&quot;;&#10;    // }&#10;    // else {&#10;    //     // Otherwise abort the HTTP connector run (this sends the last response to the error output port)&#10;    //     return &quot;FATAL_ERROR&quot;;&#10;    // }&#10;}&#10;&#10;/**&#10; * Updates the request params before each request retry attempt if it failed previously.&#10; * Useful for resetting authorization parameter (signatures, tokens, etc.), updating timestamp, etc.&#10; *&#10; * Optional. When not defined, the request stays the same.&#10; *&#10; * If input port is connected, incoming data record can be accessed through $in.0.fieldName&#10; *&#10; * failedRequestParams original parameters of request which failed and should be retried&#10; * retryNumber number of current retry, &quot;1&quot; for the first retry&#10; * lastResponseStatus - HTTP status of the failed request&#10; * lastResponseHeaders - HTTP headers of the failed request&#10; * lastResponseBody -  body of the failed request&#10; *&#10; * returns map of the modified params for the retry request&#10;**/&#10;function map[string, string] modifyRequestParamsBeforeRetryAttempt(map[string, string] failedRequestParams, integer retryNumber,&#10;        integer responseStatus, map[string, string] responseHeaders, string responseBody) {&#10;&#10;    // Copy all the previous parameters into the retry request parameters map.&#10;    map[string, string] modifiedRequestParams = failedRequestParams;&#10;&#10;    /*** Modify the params of the request ***/&#10;&#10;    // Example of timestamp modification&#10;    // modifiedRequestParams[&quot;TIMESTAMP&quot;] = toString(date2long(today()));&#10;&#10;    return modifiedRequestParams;&#10;}" enabled="enabled" guiName="Lê API do mercado de Bitcoins" guiX="58" guiY="117" id="LE_API_DO_MERCADO_DE_BITCOINS" requestMethod="GET" type="GENERIC_REST_CONNECTOR">
<attr name="url"><![CDATA[https://www.mercadobitcoin.net/api/BTC/trades/1501871369/1501891200/]]></attr>
</Node>
<Node enabled="enabled" guiName="Lixeira" guiX="771" guiY="381" id="LIXEIRA" type="TRASH"/>
<Edge debugMode="true" fromNode="FORMATA_A_DATA:0" guiBendpoints="" guiRouter="Manhattan" id="Edge6" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (out)" toNode="LIXEIRA:0"/>
<Edge debugMode="true" fromNode="JSONREADER:0" guiBendpoints="" guiRouter="Manhattan" id="Edge1" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 0 (out)" toNode="FORMATA_A_DATA:0"/>
<Edge debugMode="true" fromNode="LE_API_DO_MERCADO_DE_BITCOINS:0" guiBendpoints="" guiRouter="Manhattan" id="Edge0" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (output)" toNode="JSONREADER:0"/>
</Phase>
</Graph>
